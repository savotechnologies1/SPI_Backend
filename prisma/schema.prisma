generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id          String       @id @db.Char(36)
  name        String       @db.VarChar(100)
  email       String       @unique(map: "email") @db.VarChar(100)
  password    String       @db.VarChar(255)
  roles       admin_roles? @default(admin)
  phoneNumber String?      @unique(map: "phoneNumber") @db.VarChar(20)
  tokens      Json?
  otp         String?      @db.VarChar(10)
  resetToken  String?      @db.Char(36)
  isDeleted   Boolean?     @default(false)
}

model customers {
  id            String        @id @default(uuid()) @db.Char(36)
  firstName     String
  lastName      String
  email         String
  address       String?
  billingTerms  String?
  createdBy     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)
  customerPhone String?
  CustomOrder   CustomOrder[]
  StockOrder    StockOrder[]
}

model employee {
  id             String    @id @default(uuid()) @db.Char(36)
  firstName      String?   @db.VarChar(255)
  lastName       String?   @db.VarChar(255)
  fullName       String?   @db.VarChar(255)
  employeeId     String?   @db.VarChar(255)
  hourlyRate     String?   @db.VarChar(255)
  shift          String?   @db.VarChar(255)
  startDate      String?   @db.VarChar(255)
  pin            String?   @db.VarChar(255)
  shopFloorLogin String?   @db.VarChar(50)
  role           String    @default("shopfloor")
  phoneNumber    String?   @unique(map: "phoneNumber") @db.VarChar(20)
  tokens         Json?
  otp            String?   @db.VarChar(10)
  resetToken     String?   @db.Char(36)
  termsAccepted  Boolean?
  status         String?   @db.VarChar(255)
  createdBy      String?   @db.VarChar(255)
  isDeleted      Boolean?  @default(false)
  createdAt      DateTime? @default(now()) @db.DateTime(0)
  updatedAt      DateTime? @default(now()) @db.DateTime(0)
  email          String?   @unique(map: "email") @db.VarChar(100)
  password       String    @db.VarChar(255)
  about          String?   @db.VarChar(512)
  city           String?   @db.VarChar(100)
  country        String?   @db.VarChar(100)
  state          String?   @db.VarChar(100)
  zipCode        String?   @db.VarChar(100)
}

model process {
  id                   String                 @id @db.VarChar(10)
  processName          String?                @db.VarChar(255)
  machineName          String?                @db.VarChar(255)
  cycleTime            String?                @db.VarChar(255)
  ratePerHour          String?                @db.VarChar(255)
  orderNeeded          Boolean
  createdBy            String?                @db.VarChar(255)
  isDeleted            Boolean?               @default(false)
  createdAt            DateTime?              @default(now()) @db.DateTime(0)
  updatedAt            DateTime?              @default(now()) @db.DateTime(0)
  partFamily           String?                @db.VarChar(255)
  isProcessReq         Boolean                @default(false)
  processDesc          String?                @db.VarChar(255)
  type                 String                 @default("") @db.VarChar(50)
  PartNumber           PartNumber[]
  WorkInstruction      WorkInstruction[]
  WorkInstructionApply WorkInstructionApply[]
  WorkInstructionSteps WorkInstructionSteps[]
}

model suppliers {
  id           String            @id @db.VarChar(10)
  firstName    String?           @db.VarChar(255)
  lastName     String?           @db.VarChar(255)
  email        String?           @db.VarChar(255)
  address      String?           @db.VarChar(255)
  billingTerms String?           @db.VarChar(10)
  createdBy    String?           @db.VarChar(255)
  isDeleted    Boolean?          @default(false)
  createdAt    DateTime?         @default(now()) @db.DateTime(0)
  updatedAt    DateTime?         @default(now()) @db.DateTime(0)
  orders       supplier_orders[]
}

model supplier_orders {
  id           Int        @id @default(autoincrement())
  order_number String?    @db.VarChar(50)
  order_date   String?    @db.VarChar(50)
  supplier_id  String?    @db.VarChar(10)
  part_name    String?    @db.VarChar(255)
  quantity     String?    @db.VarChar(50)
  cost         String?    @db.VarChar(50)
  need_date    String?    @db.VarChar(50)
  createdBy    String?    @db.VarChar(255)
  isDeleted    Boolean?   @default(false)
  createdAt    DateTime?  @default(now()) @db.DateTime(0)
  updatedAt    DateTime?  @default(now()) @db.DateTime(0)
  supplier     suppliers? @relation(fields: [supplier_id], references: [id])

  @@index([supplier_id], map: "supplier_orders_supplier_id_fkey")
}

model users {
  id          String   @id @default(uuid()) @db.Char(36)
  name        String?  @db.VarChar(100)
  email       String?  @unique(map: "email") @db.VarChar(100)
  isDeleted   Boolean? @default(false)
  otp         String?  @db.VarChar(10)
  password    String   @db.VarChar(255)
  phoneNumber String?  @unique(map: "phoneNumber") @db.VarChar(20)
  resetToken  String?  @db.Char(36)
  role        String   @default("shopfloor")
  tokens      Json?
}

model mailTemplate {
  id            String   @id @default(uuid()) @db.Char(36)
  templateEvent String   @unique
  active        Boolean  @default(true)
  subject       String?
  mailVariables String?
  htmlBody      String?  @db.LongText
  textBody      String?  @db.Text
  isDeleted     Boolean  @default(false)
  createdBy     String?  @db.Char(36)
  updatedBy     String?  @db.Char(36)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StockOrder {
  id                 String    @id @default(uuid()) @db.Char(36)
  orderNumber        String    @unique
  orderDate          String?
  shipDate           String?
  customerId         String
  customerName       String
  customerEmail      String
  customerPhone      String
  productNumber      String
  productDescription String
  cost               String
  productQuantity    Int
  createdBy          String?   @db.Char(36)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isDeleted          Boolean   @default(false)
  totalCost          String
  customer           customers @relation(fields: [customerId], references: [id])

  @@index([customerId], map: "StockOrder_customerId_fkey")
}

model CustomOrder {
  id              String          @id @default(uuid()) @db.Char(36)
  orderNumber     String          @unique
  orderDate       DateTime?
  shipDate        DateTime?
  customerId      String          @db.Char(36)
  customerName    String
  customerEmail   String
  customerPhone   String
  productNumber   String
  cost            Decimal         @db.Decimal(10, 2)
  productQuantity Int
  createdBy       String?         @db.Char(36)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isDeleted       Boolean         @default(false)
  partNumber      String
  totalCost       Decimal         @db.Decimal(10, 2)
  customer        customers       @relation(fields: [customerId], references: [id])
  processDetails  ProcessDetail[]

  @@index([customerId], map: "CustomOrder_customerId_fkey")
}

model ProcessDetail {
  id            Int         @id @default(autoincrement())
  process       String
  assignTo      String
  totalTime     Int
  customOrderId String      @db.Char(36)
  customOrder   CustomOrder @relation(fields: [customOrderId], references: [id], onDelete: Cascade)

  @@index([customOrderId], map: "ProcessDetail_customOrderId_fkey")
}

model PartNumber {
  part_id              String                 @id @default(uuid()) @db.Char(36)
  partFamily           String                 @db.Char(36)
  partNumber           String                 @unique @db.Char(36)
  partDescription      String                 @db.VarChar(255)
  cost                 Float
  leadTime             Int
  companyName          String                 @db.VarChar(100)
  minStock             Int
  cycleTime            Int?
  processId            String?                @db.VarChar(10)
  processDesc          String?                @db.VarChar(255)
  type                 String                 @db.VarChar(100)
  submittedBy          String?                @db.VarChar(100)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  availStock           Int?
  isDeleted            Boolean                @default(false)
  processOrderRequired Boolean                @default(false)
  supplierOrderQty     Int?
  createdBy            String?                @db.Char(36)
  partImages           PartImage[]
  process              process?               @relation(fields: [processId], references: [id])
  productTree          ProductTree[]
  productUsedIn        ProductTree[]          @relation("ProductRelation")
  WorkInstruction      WorkInstruction[]
  WorkInstructionApply WorkInstructionApply[]
  WorkInstructionSteps WorkInstructionSteps[]

  @@index([processId], map: "PartNumber_processId_fkey")
}

model PartImage {
  id        String     @id @default(uuid()) @db.Char(36)
  imageUrl  String     @db.VarChar(255)
  partId    String     @db.Char(36)
  type      String     @db.VarChar(100)
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  updatedAt DateTime   @updatedAt
  part      PartNumber @relation(fields: [partId], references: [part_id])

  @@index([partId], map: "PartImage_partId_fkey")
}

model ProductTree {
  id                   String                 @id @default(uuid()) @db.Char(36)
  product_id           String                 @db.Char(36)
  part_id              String?                @db.Char(36)
  partQuantity         Int
  isDeleted            Boolean                @default(false)
  instructionRequired  Boolean                @default(false)
  createdBy            String?                @db.Char(36)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  part                 PartNumber?            @relation(fields: [part_id], references: [part_id])
  product              PartNumber             @relation("ProductRelation", fields: [product_id], references: [part_id])
  WorkInstructionSteps WorkInstructionSteps[]

  @@index([part_id])
  @@index([product_id], map: "ProductTree_product_id_fkey")
}

model WorkInstruction {
  id                   String                 @id @default(uuid()) @db.Char(36)
  processId            String                 @db.Char(36)
  isDeleted            Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  instructionTitle     String?
  productId            String                 @db.Char(36)
  type                 String                 @db.Char(36)
  InstructionVideo     InstructionVideo[]
  process              process                @relation(fields: [processId], references: [id])
  PartNumber           PartNumber             @relation(fields: [productId], references: [part_id])
  WorkInstructionApply WorkInstructionApply[]
  steps                WorkInstructionSteps[]

  @@index([processId], map: "WorkInstruction_processId_fkey")
  @@index([productId], map: "WorkInstruction_productId_fkey")
}

model WorkInstructionSteps {
  id                     String                @id @default(uuid()) @db.Char(36)
  workInstructionId      String                @db.Char(36)
  stepNumber             Int
  title                  String
  instruction            String
  isDeleted              Boolean               @default(false)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  processId              String?               @db.VarChar(10)
  productTreeId          String?               @db.Char(36)
  partNumberPart_id      String?               @db.Char(36)
  workInstructionApplyId String?               @db.Char(36)
  images                 InstructionImage[]
  videos                 InstructionVideo[]
  PartNumber             PartNumber?           @relation(fields: [partNumberPart_id], references: [part_id])
  process                process?              @relation(fields: [processId], references: [id])
  productTree            ProductTree?          @relation(fields: [productTreeId], references: [id])
  WorkInstructionApply   WorkInstructionApply? @relation(fields: [workInstructionApplyId], references: [id])
  workInstruction        WorkInstruction       @relation(fields: [workInstructionId], references: [id])

  @@index([processId], map: "WorkInstructionSteps_processId_fkey")
  @@index([productTreeId], map: "WorkInstructionSteps_productTreeId_fkey")
  @@index([workInstructionId], map: "WorkInstructionSteps_workInstructionId_fkey")
  @@index([workInstructionApplyId], map: "WorkInstructionSteps_workInstructionApplyId_fkey")
  @@index([partNumberPart_id], map: "WorkInstructionSteps_partNumberPart_id_fkey")
}

model WorkInstructionApply {
  id               String                 @id @default(uuid()) @db.Char(36)
  instructionId    String                 @db.Char(36)
  processId        String                 @db.Char(36)
  instructionTitle String?
  productId        String                 @db.Char(36)
  isDeleted        Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  type             String                 @db.Char(36)
  InstructionVideo InstructionVideo[]
  workInstruction  WorkInstruction        @relation(fields: [instructionId], references: [id])
  process          process                @relation(fields: [processId], references: [id])
  PartNumber       PartNumber             @relation(fields: [productId], references: [part_id])
  steps            WorkInstructionSteps[]

  @@index([instructionId], map: "WorkInstructionApply_instructionId_fkey")
  @@index([processId], map: "WorkInstructionApply_processId_fkey")
  @@index([productId], map: "WorkInstructionApply_productId_fkey")
}

model InstructionImage {
  id        String                @id @default(uuid()) @db.Char(36)
  stepId    String?               @db.Char(36)
  imagePath String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  isDeleted Boolean               @default(false)
  step      WorkInstructionSteps? @relation(fields: [stepId], references: [id])

  @@index([stepId])
}

model InstructionVideo {
  id                     String                @id @default(uuid()) @db.Char(36)
  stepId                 String                @db.Char(36)
  videoPath              String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  workInstructionId      String?               @db.Char(36)
  workInstructionApplyId String?               @db.Char(36)
  isDeleted              Boolean               @default(false)
  step                   WorkInstructionSteps  @relation(fields: [stepId], references: [id])
  WorkInstructionApply   WorkInstructionApply? @relation(fields: [workInstructionApplyId], references: [id])
  WorkInstruction        WorkInstruction?      @relation(fields: [workInstructionId], references: [id])

  @@index([stepId])
  @@index([workInstructionId], map: "InstructionVideo_workInstructionId_fkey")
  @@index([workInstructionApplyId], map: "InstructionVideo_workInstructionApplyId_fkey")
}

enum admin_roles {
  admin
  superAdmin
}
