generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id           String       @id @db.Char(36)
  name         String       @db.VarChar(100)
  email        String       @unique(map: "email") @db.VarChar(100)
  password     String       @db.VarChar(255)
  roles        admin_roles? @default(admin)
  phoneNumber  String?      @unique(map: "phoneNumber") @db.VarChar(20)
  tokens       Json?
  otp          String?      @db.VarChar(10)
  otpExpiresAt DateTime?
  resetToken   String?      @db.Char(36)
  isDeleted    Boolean?     @default(false)
  about        String       @default("") @db.VarChar(512)
  address      String       @default("") @db.VarChar(512)
  city         String       @default("") @db.Char(50)
  country      String       @default("") @db.Char(50)
  profileImg   String       @default("") @db.VarChar(255)
  state        String       @default("") @db.Char(50)
  zipCode      String       @default("") @db.Char(50)

  submittedBy StockOrderSchedule[]
  scapEntries scapEntries[]
}

model customers {
  id                 String               @id @default(uuid()) @db.Char(36)
  firstName          String
  lastName           String
  email              String
  address            String?
  billingTerms       String?
  createdBy          String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isDeleted          Boolean              @default(false)
  customerPhone      String?
  CustomOrder        CustomOrder[]
  ProductionResponse ProductionResponse[]
  orders             StockOrder[]
  processLogin       processLogin[]
  ProcessOrderTable  ProcessOrderTable[]
  scapEntries        scapEntries[]
}

model employee {
  id                 String               @id @default(uuid()) @db.Char(36)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  fullName           String?              @db.VarChar(255)
  employeeId         String?              @db.VarChar(255)
  hourlyRate         String?              @db.VarChar(255)
  shift              String?              @db.VarChar(255)
  startDate          String?              @db.VarChar(255)
  pin                String?              @db.VarChar(255)
  shopFloorLogin     Boolean?             @default(false)
  role               String               @default("shopfloor")
  phoneNumber        String?              @unique(map: "phoneNumber") @db.VarChar(20)
  tokens             Json?
  otp                String?              @db.VarChar(10)
  resetToken         String?              @db.Char(36)
  termsAccepted      Boolean?
  status             String?              @db.VarChar(255)
  createdBy          String?              @db.VarChar(255)
  isDeleted          Boolean?             @default(false)
  createdAt          DateTime?            @default(now()) @db.DateTime(0)
  updatedAt          DateTime?            @default(now()) @db.DateTime(0)
  email              String?              @unique(map: "email") @db.VarChar(100)
  password           String               @db.VarChar(255)
  about              String?              @db.VarChar(512)
  city               String?              @db.VarChar(100)
  country            String?              @db.VarChar(100)
  state              String?              @db.VarChar(100)
  zipCode            String?              @db.VarChar(100)
  ProductionResponse ProductionResponse[]
  scapEntries        scapEntries[]
}

model process {
  id                   String                 @id @db.VarChar(10)
  processName          String?                @db.VarChar(255)
  machineName          String?                @db.VarChar(255)
  cycleTime            String?                @db.VarChar(255)
  ratePerHour          String?                @db.VarChar(255)
  orderNeeded          Boolean
  createdBy            String?                @db.VarChar(255)
  isDeleted            Boolean?               @default(false)
  createdAt            DateTime?              @default(now()) @db.DateTime(0)
  updatedAt            DateTime?              @default(now()) @db.DateTime(0)
  partFamily           String?                @db.VarChar(255)
  isProcessReq         Boolean                @default(false)
  processDesc          String?                @db.VarChar(255)
  type                 String                 @default("") @db.VarChar(50)
  PartNumber           PartNumber[]
  ProductionResponse   ProductionResponse[]
  StockOrderSchedule   StockOrderSchedule[]
  WorkInstruction      WorkInstruction[]
  WorkInstructionApply WorkInstructionApply[]
  WorkInstructionSteps WorkInstructionSteps[]
  processLogin         processLogin[]
  ProcessOrderTable    ProcessOrderTable[]
  scapEntries          scapEntries[]
  ProductTree          ProductTree[]
}

model suppliers {
  id           String    @id @default(uuid()) @db.VarChar(100)
  firstName    String?   @db.VarChar(255)
  lastName     String?   @db.VarChar(255)
  email        String?   @db.VarChar(255)
  address      String?   @db.VarChar(255)
  billingTerms String?   @db.VarChar(10)
  createdBy    String?   @db.VarChar(255)
  isDeleted    Boolean?  @default(false)
  createdAt    DateTime? @default(now()) @db.DateTime(0)
  updatedAt    DateTime? @default(now()) @db.DateTime(0)

  orders             supplier_orders[]
  scapEntries        scapEntries[]
  supplier_inventory supplier_inventory[]
}

model supplier_orders {
  id           String      @id @default(uuid()) @db.Char(36)
  order_number String?     @db.VarChar(50)
  order_date   String?     @db.VarChar(50)
  supplier_id  String?     @db.VarChar(100)
  firstName    String?     @db.VarChar(255)
  lastName     String?     @db.VarChar(255)
  email        String?     @db.VarChar(100)
  phone        String?     @db.VarChar(100)
  quantity     Int?
  cost         Int?
  status       String?     @default("pending")
  need_date    String?     @db.VarChar(50)
  createdBy    String?     @db.VarChar(255)
  isDeleted    Boolean?    @default(false)
  createdAt    DateTime?   @default(now()) @db.DateTime(0)
  updatedAt    DateTime?   @default(now()) @db.DateTime(0)
  part_id      String?     @db.VarChar(100)
  part         PartNumber? @relation(fields: [part_id], references: [part_id])
  supplier     suppliers?  @relation(fields: [supplier_id], references: [id])

  @@index([supplier_id], map: "supplier_orders_supplier_id_fkey")
  @@index([part_id], map: "supplier_orders_supplier_part_id_fkey")
}

model supplier_inventory {
  id          String  @id @default(uuid()) @db.Char(36)
  part_id     String  @db.VarChar(100)
  minStock    Int?
  availStock  Int?
  cost        Float?
  supplier_id String? @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  part      PartNumber @relation(fields: [part_id], references: [part_id])
  supplier  suppliers? @relation(fields: [supplier_id], references: [id])
  isDeleted Boolean?   @default(false)

  @@unique([part_id])
}

model users {
  id          String   @id @default(uuid()) @db.Char(36)
  name        String?  @db.VarChar(100)
  email       String?  @unique(map: "email") @db.VarChar(100)
  isDeleted   Boolean? @default(false)
  otp         String?  @db.VarChar(10)
  password    String   @db.VarChar(255)
  phoneNumber String?  @unique(map: "phoneNumber") @db.VarChar(20)
  resetToken  String?  @db.Char(36)
  role        String   @default("shopfloor")
  tokens      Json?
}

model mailTemplate {
  id            String   @id @default(uuid()) @db.Char(36)
  templateEvent String   @unique
  active        Boolean  @default(true)
  subject       String?
  mailVariables String?
  htmlBody      String?  @db.LongText
  textBody      String?  @db.Text
  isDeleted     Boolean  @default(false)
  createdBy     String?  @db.Char(36)
  updatedBy     String?  @db.Char(36)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StockOrder {
  id                                              String               @id @default(uuid()) @db.Char(36)
  orderNumber                                     String               @unique
  orderDate                                       String?
  shipDate                                        String?
  customerId                                      String
  customerName                                    String
  customerEmail                                   String
  customerPhone                                   String
  productNumber                                   String
  productDescription                              String               @db.Text
  cost                                            String
  productQuantity                                 Int
  createdBy                                       String?              @db.Char(36)
  createdAt                                       DateTime             @default(now())
  updatedAt                                       DateTime             @updatedAt
  isDeleted                                       Boolean              @default(false)
  totalCost                                       String
  status                                          String               @default("") @db.VarChar(60)
  partId                                          String               @db.VarChar(100)
  ProductionResponse                              ProductionResponse[]
  customer                                        customers            @relation(fields: [customerId], references: [id])
  part                                            PartNumber           @relation("part", fields: [partId], references: [part_id])
  PartNumber_StockOrder_productNumberToPartNumber PartNumber           @relation("StockOrder_productNumberToPartNumber", fields: [productNumber], references: [partNumber])
  processLogin                                    processLogin[]
  ProcessOrderTable                               ProcessOrderTable[]
  scapEntries                                     scapEntries[]
  schedules                                       StockOrderSchedule[]

  @@index([customerId], map: "StockOrder_customerId_fkey")
  @@index([partId], map: "StockOrder_partId_fkey")
  @@index([productNumber], map: "StockOrder_productNumber_fkey")
}

model CustomOrder {
  id              String          @id @default(uuid()) @db.Char(36)
  orderNumber     String          @unique
  orderDate       DateTime?
  shipDate        DateTime?
  customerId      String          @db.Char(36)
  customerName    String
  customerEmail   String
  customerPhone   String
  cost            Decimal         @db.Decimal(10, 2)
  productQuantity Int
  productId       String?         @db.Char(36)
  partId          String?         @db.Char(36)
  partNumber      String?
  type            String?
  status          String          @default("") @db.VarChar(60)
  createdBy       String?         @db.Char(36)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isDeleted       Boolean         @default(false)
  totalCost       Decimal         @db.Decimal(10, 2)
  customer        customers       @relation(fields: [customerId], references: [id])
  part            PartNumber?     @relation(fields: [partId], references: [part_id])
  processDetails  ProcessDetail[]

  product PartNumber? @relation("ProductForOrder", fields: [productId], references: [part_id])

  schedules          StockOrderSchedule[]
  ProductionResponse ProductionResponse[]

  @@index([productId], map: "CustomOrder_productId_fkey") // यह भी जोड़ना अच्छा हैn
  @@index([customerId], map: "CustomOrder_customerId_fkey")
}

model ProcessDetail {
  id            Int         @id @default(autoincrement())
  process       String
  assignTo      String
  totalTime     Int
  customOrderId String      @db.Char(36)
  customOrder   CustomOrder @relation(fields: [customOrderId], references: [id], onDelete: Cascade)

  @@index([customOrderId], map: "ProcessDetail_customOrderId_fkey")
}

model PartNumber {
  part_id          String  @id @default(uuid()) @db.Char(36)
  partFamily       String  @db.Char(36)
  partNumber       String  @unique @db.Char(36)
  partDescription  String? @db.VarChar(255)
  type             String  @db.VarChar(100)
  cost             Float
  leadTime         Int
  minStock         Int
  availStock       Int?
  supplierOrderQty Int?

  cycleTime            Int?
  processId            String? @db.VarChar(10)
  processDesc          String? @db.VarChar(255)
  processOrderRequired Boolean @default(false)
  instructionRequired  Boolean @default(false)

  companyName String   @db.VarChar(100)
  submittedBy String?  @db.VarChar(100)
  createdBy   String?  @db.Char(36)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  process process? @relation(fields: [processId], references: [id])

  partImages PartImage[]
  components ProductTree[] @relation("ParentProduct")

  usedInProducts                                  ProductTree[] @relation("ComponentParts")
  stockOrders                                     StockOrder[]  @relation("part")
  StockOrder_StockOrder_productNumberToPartNumber StockOrder[]  @relation("StockOrder_productNumberToPartNumber")

  usedAsPart StockOrderSchedule[] @relation(name: "PartRelation")

  ProductionResponse   ProductionResponse[]
  WorkInstruction      WorkInstruction[]
  WorkInstructionApply WorkInstructionApply[]
  WorkInstructionSteps WorkInstructionSteps[]
  processLogin         processLogin[]
  supplier_orders      supplier_orders[]
  ProductTree          ProductTree[]
  StockOrderSchedule   StockOrderSchedule[]
  ProcessOrderTable    ProcessOrderTable[]
  scapEntries          scapEntries[]
  supplier_inventory   supplier_inventory?
  CustomOrder          CustomOrder[]
  ordersAsProduct      CustomOrder[]          @relation("ProductForOrder")

  @@index([processId], map: "PartNumber_processId_fkey")
}

model PartImage {
  id        String     @id @default(uuid()) @db.Char(36)
  imageUrl  String     @db.VarChar(255)
  partId    String     @db.Char(36)
  type      String     @db.VarChar(100)
  createdAt DateTime   @default(now())
  isDeleted Boolean    @default(false)
  updatedAt DateTime   @updatedAt
  part      PartNumber @relation(fields: [partId], references: [part_id])

  @@index([partId], map: "PartImage_partId_fkey")
}

model ProductTree {
  id                   String                 @id @default(uuid()) @db.Char(36)
  product_id           String                 @db.Char(36)
  part_id              String?                @db.Char(36)
  partQuantity         Int
  isDeleted            Boolean                @default(false)
  processOrderRequired Boolean                @default(false)
  instructionRequired  Boolean                @default(false)
  processId            String?                @db.VarChar(10)
  processDesc          String?                @db.VarChar(255)
  createdBy            String?                @db.Char(36)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  WorkInstructionSteps WorkInstructionSteps[]
  part                 PartNumber?            @relation(name: "ComponentParts", fields: [part_id], references: [part_id])
  process              process?               @relation(fields: [processId], references: [id])

  // *** ADD THIS NEW RELATION for the parent product ***
  product           PartNumber  @relation(name: "ParentProduct", fields: [product_id], references: [part_id])
  PartNumber        PartNumber? @relation(fields: [partNumberPart_id], references: [part_id])
  partNumberPart_id String?     @db.Char(36)

  @@unique([product_id, part_id], name: "product_part_unique")
  @@index([part_id])
  @@index([product_id], map: "ProductTree_product_id_fkey")
}

model WorkInstruction {
  id                   String                 @id @default(uuid()) @db.Char(36)
  processId            String                 @db.Char(36)
  isDeleted            Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  instructionTitle     String?
  productId            String                 @db.Char(36)
  type                 String                 @db.Char(36)
  InstructionVideo     InstructionVideo[]
  process              process                @relation(fields: [processId], references: [id])
  PartNumber           PartNumber             @relation(fields: [productId], references: [part_id])
  WorkInstructionApply WorkInstructionApply[]
  steps                WorkInstructionSteps[]

  @@index([processId], map: "WorkInstruction_processId_fkey")
  @@index([productId], map: "WorkInstruction_productId_fkey")
}

model WorkInstructionSteps {
  id                     String                   @id @default(uuid()) @db.Char(36)
  workInstructionId      String                   @db.Char(36)
  stepNumber             Int
  title                  String
  instruction            String                   @db.VarChar(2000)
  isDeleted              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  processId              String?                  @db.VarChar(10)
  productTreeId          String?                  @db.Char(36)
  partNumberPart_id      String?                  @db.Char(36)
  workInstructionApplyId String?                  @db.Char(36)
  images                 InstructionImage[]
  videos                 InstructionVideo[]
  PartNumber             PartNumber?              @relation(fields: [partNumberPart_id], references: [part_id])
  process                process?                 @relation(fields: [processId], references: [id])
  productTree            ProductTree?             @relation(fields: [productTreeId], references: [id])
  WorkInstructionApply   WorkInstructionApply?    @relation(fields: [workInstructionApplyId], references: [id])
  workInstruction        WorkInstruction?         @relation(fields: [workInstructionId], references: [id])
  ProductionStepTracking ProductionStepTracking[]

  @@index([processId], map: "WorkInstructionSteps_processId_fkey")
  @@index([productTreeId], map: "WorkInstructionSteps_productTreeId_fkey")
  @@index([workInstructionId], map: "WorkInstructionSteps_workInstructionId_fkey")
  @@index([workInstructionApplyId], map: "WorkInstructionSteps_workInstructionApplyId_fkey")
  @@index([partNumberPart_id], map: "WorkInstructionSteps_partNumberPart_id_fkey")
}

model WorkInstructionApply {
  id               String                 @id @default(uuid()) @db.Char(36)
  instructionId    String                 @db.Char(36)
  processId        String                 @db.Char(36)
  instructionTitle String?
  productId        String                 @db.Char(36)
  isDeleted        Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  type             String                 @db.Char(36)
  InstructionVideo InstructionVideo[]
  workInstruction  WorkInstruction        @relation(fields: [instructionId], references: [id])
  process          process                @relation(fields: [processId], references: [id])
  PartNumber       PartNumber             @relation(fields: [productId], references: [part_id])
  steps            WorkInstructionSteps[]

  @@index([productId], map: "WorkInstructionApply_productId_custom_fk")
  @@index([instructionId], map: "WorkInstructionApply_instructionId_fkey")
  @@index([processId], map: "WorkInstructionApply_processId_fkey")
  @@index([productId], map: "WorkInstructionApply_productId_fkey")
}

model InstructionImage {
  id        String                @id @default(uuid()) @db.Char(36)
  stepId    String?               @db.Char(36)
  imagePath String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  isDeleted Boolean               @default(false)
  step      WorkInstructionSteps? @relation(fields: [stepId], references: [id])

  @@index([stepId])
}

model InstructionVideo {
  id                     String                @id @default(uuid()) @db.Char(36)
  stepId                 String                @db.Char(36)
  videoPath              String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  workInstructionId      String?               @db.Char(36)
  workInstructionApplyId String?               @db.Char(36)
  isDeleted              Boolean               @default(false)
  step                   WorkInstructionSteps  @relation(fields: [stepId], references: [id])
  WorkInstructionApply   WorkInstructionApply? @relation(fields: [workInstructionApplyId], references: [id])
  WorkInstruction        WorkInstruction?      @relation(fields: [workInstructionId], references: [id])

  @@index([stepId])
  @@index([workInstructionId], map: "InstructionVideo_workInstructionId_fkey")
  @@index([workInstructionApplyId], map: "InstructionVideo_workInstructionApplyId_fkey")
}

model processLogin {
  id                String      @id @default(uuid()) @db.Char(36)
  processId         String
  orderId           String      @default("") @db.VarChar(100)
  userId            String?
  customersId       String?     @db.Char(36)
  partNumberPart_id String?     @db.Char(36)
  createdAt         DateTime    @default(now())
  isDeleted         Boolean     @default(false)
  updatedAt         DateTime    @updatedAt
  type              String?     @db.Char(36)
  customers         customers?  @relation(fields: [customersId], references: [id])
  StockOrder        StockOrder  @relation(fields: [orderId], references: [id])
  PartNumber        PartNumber? @relation(fields: [partNumberPart_id], references: [part_id])
  process           process     @relation(fields: [processId], references: [id])

  @@index([orderId], map: "ProductionResponse_orderId_fkey")
  @@index([processId], map: "ProductionResponse_processId_fkey")
  @@index([customersId], map: "processLogin_customersId_fkey")
  @@index([partNumberPart_id], map: "processLogin_partNumberPart_id_fkey")
}

model StockOrderSchedule {
  id String @id @default(uuid()) @db.Char(36)

  // --- CHANGES START HERE ---
  // These two fields create the polymorphic relationship.
  // `order_id` is now just a string, not a foreign key.
  order_id   String @db.Char(36)
  order_type String @db.VarChar(100) // 'StockOrder' or 'CustomOrder'
  // --- CHANGES END HERE ---

  part_id           String?   @db.Char(36)
  quantity          Int?
  completedQuantity Int?      @default(0)
  scrapQuantity     Int?      @default(0)
  scheduleQuantity  Int?      @default(0)
  remainingQty      Int?      @default(0)
  status            String    @default("new") @db.VarChar(60)
  type              String    @default("") @db.VarChar(100)
  order_date        DateTime  @default(now())
  delivery_date     DateTime  @default(now())
  completed_date    DateTime?
  completed_by      String?
  submitted_by      String?
  processOrder      Boolean   @default(false)

  part        PartNumber? @relation(name: "PartRelation", fields: [part_id], references: [part_id])
  submittedBy admin?      @relation(fields: [submitted_by], references: [id])
  process     process?    @relation(fields: [processId], references: [id])
  processId   String?     @db.VarChar(10)

  // REMOVE the direct relations to StockOrder and CustomOrder
  // order       StockOrder? @relation(fields: [order_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  // customOrder   CustomOrder? @relation(fields: [customOrderId], references: [id])
  // REMOVE the redundant customOrderId field
  // customOrderId String?

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  isDeleted         Boolean      @default(false)
  PartNumber        PartNumber?  @relation(fields: [partNumberPart_id], references: [part_id])
  partNumberPart_id String?      @db.Char(36)
  StockOrder        StockOrder?  @relation(fields: [stockOrderId], references: [id])
  stockOrderId      String?      @db.Char(36)
  CustomOrder       CustomOrder? @relation(fields: [customOrderId], references: [id])
  customOrderId     String?      @db.Char(36)

  // This unique constraint is now correct and essential for your upsert to work properly!
  @@unique([order_id, part_id, order_type])
  @@index([order_id, order_type])
  @@index([part_id])
  @@index([submitted_by])
}

model ProductionResponse {
  id                     String                   @id @default(uuid()) @db.Char(36)
  partId                 String?                  @db.Char(36)
  processId              String                   @db.Char(36)
  orderId                String?                  @db.Char(36) // This field MUST exist
  customOrderId          String?
  instructionId          String?                  @db.Char(36)
  stepstartTime          DateTime?
  stepstartEnd           DateTime?
  quantity               Boolean?                 @default(false)
  scheduleQuantity       Int?                     @default(0)
  remainingQty           Int?                     @default(0)
  completedQuantity      Int?                     @default(0)
  scrapQuantity          Int?                     @default(0)
  scrap                  Boolean?                 @default(false)
  cycleTimeStart         DateTime?                @default(now())
  cycleTimeEnd           DateTime?                @default(now())
  submittedBy            String?                  @db.VarChar(100)
  submittedDateTime      DateTime?                @default(now())
  createdBy              String?                  @db.Char(36)
  stationUserId          String?                  @db.Char(36)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  traniningStatus        Boolean                  @default(false)
  isDeleted              Boolean                  @default(false)
  type                   String?                  @db.VarChar(36)
  order_type             String?                  @db.VarChar(100) // This will hold 'StockOrder' or 'CustomOrder'
  StockOrder             StockOrder?              @relation(fields: [orderId], references: [id])
  CustomOrder            CustomOrder?             @relation(fields: [customOrderId], references: [id])
  PartNumber             PartNumber?              @relation(fields: [partId], references: [part_id])
  process                process?                 @relation(fields: [processId], references: [id])
  customers              customers?               @relation(fields: [customersId], references: [id])
  employeeInfo           employee?                @relation(fields: [stationUserId], references: [id])
  customersId            String?                  @db.Char(36)
  ProductionStepTracking ProductionStepTracking[]

  @@index([orderId, order_type]) // Add an index for performance
  @@index([orderId], map: "ProductionResponse_orderId_fkey")
  @@index([processId], map: "ProductionResponse_processId_fkey")
  @@index([partId], map: "ProductionResponse_partId_fkey")
  @@index([stationUserId], map: "ProductionResponse_stationUserId_fkey")
}

model ProductionStepTracking {
  id            String    @id @default(uuid())
  status        String    @default("pending")
  stepStartTime DateTime?
  stepEndTime   DateTime?

  productionResponseId String
  productionResponse   ProductionResponse @relation(fields: [productionResponseId], references: [id])

  workInstructionStepId String
  workInstructionStep   WorkInstructionSteps @relation(fields: [workInstructionStepId], references: [id])
  scapEntries           scapEntries?         @relation(fields: [scapEntriesId], references: [id])
  scapEntriesId         String?              @db.Char(36)

  @@map("production_step_tracking")
}

model ProcessOrderTable {
  id                String      @id @default(uuid()) @db.Char(36)
  partId            String?     @db.Char(36)
  processId         String      @db.Char(36)
  orderId           String      @db.Char(36)
  instructionId     String?     @db.Char(36)
  quantity          Int?
  completedQty      Int?
  scrap             Int?
  cycleTimeStart    DateTime?   @default(now())
  cycleTimeEnd      DateTime?   @default(now())
  submittedBy       String?     @db.VarChar(100)
  submittedDateTime DateTime?   @default(now())
  createdBy         String?     @db.Char(36)
  userId            String?     @db.Char(36)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isDeleted         Boolean     @default(false)
  type              String?     @db.VarChar(36)
  StockOrder        StockOrder? @relation(fields: [orderId], references: [id])
  PartNumber        PartNumber? @relation(fields: [partId], references: [part_id])
  process           process?    @relation(fields: [processId], references: [id])
  customers         customers?  @relation(fields: [customersId], references: [id])
  customersId       String?     @db.Char(36)

  @@index([orderId], map: "ProductionResponse_orderId_fkey")
  @@index([processId], map: "ProductionResponse_processId_fkey")
  @@index([partId], map: "ProductionResponse_partId_fkey")
}

model scapEntries {
  id               String   @id @default(uuid()) @db.Char(36)
  partId           String?  @db.Char(36)
  processId        String?  @db.Char(36)
  productId        String?  @db.Char(36)
  returnQuantity   Int?     @default(0)
  scrapStatus      Boolean? @default(false)
  createdBy        String?  @db.Char(36)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDeleted        Boolean  @default(false)
  type             String?  @db.VarChar(36)
  returnSupplierId String?  @db.VarChar(100)

  supplierId             String?                  @db.VarChar(100) // Renamed from suppliersId
  supplier               suppliers?               @relation(fields: [supplierId], references: [id])
  createdByAdminId       String?                  @db.Char(36)
  createdByEmployeeId    String?                  @db.Char(36)
  PartNumber             PartNumber?              @relation(fields: [partId], references: [part_id])
  customers              customers?               @relation(fields: [customersId], references: [id])
  customersId            String?                  @db.Char(36)
  employeeId             String?                  @db.Char(36)
  process                process?                 @relation(fields: [processId], references: [id])
  StockOrder             StockOrder?              @relation(fields: [stockOrderId], references: [id])
  stockOrderId           String?                  @db.Char(36)
  ProductionStepTracking ProductionStepTracking[]

  createdByAdmin    admin?    @relation(fields: [createdByAdminId], references: [id])
  createdByEmployee employee? @relation(fields: [createdByEmployeeId], references: [id])

  @@index([processId], map: "ScapEntries_processId_fkey")
  @@index([partId], map: "ScapEntries_partId_fkey")
}

model stationNotification {
  id         String   @id @default(uuid())
  employeeId String?
  comment    String?
  enqueryImg String?
  status     Boolean  @default(false)
  createdAt  DateTime @default(now())
  isDeleted  Boolean? @default(false)
}

enum admin_roles {
  admin
  superAdmin
}
